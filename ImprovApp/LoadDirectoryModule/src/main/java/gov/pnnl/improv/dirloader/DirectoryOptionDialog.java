/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.pnnl.improv.dirloader;


import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.NumberFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.KeyStroke;


/**
 *
 * @author d3x924
 */
public class DirectoryOptionDialog extends javax.swing.JDialog
{
    private static final Logger LOGGER =
            Logger.getLogger(DirectoryOptionDialog.class.getName());
    
    private static final long serialVersionUID = -1349824967593577844L;
    private static final String DEF_DIR_DEPTH = "5";
    

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    
    private NumberFormat mIntFormat;
    private JFileChooser mFileChooser;
    private File mLastVisit;
    private IDirectoryChangedListener mDirChangedListener;
    private int returnStatus = RET_CANCEL;

    
    /**
     * Creates new form DirectoryOptionDialog
     */
    public DirectoryOptionDialog(java.awt.Frame parent, boolean modal,
            IDirectoryChangedListener listener)
    {
        super(parent, modal);
        mDirChangedListener = listener;

        preInit();
        initComponents();
        maxDepthTextField.setText(DEF_DIR_DEPTH);
        
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);

        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction()
        {
            private static final long serialVersionUID = 1L;
            @Override
            public void actionPerformed(ActionEvent e)
            {
                doClose(RET_CANCEL);
            }

        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus()
    {
        return returnStatus;
    }
    
    private void preInit()
    {
        mFileChooser = new JFileChooser();
        mFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        mIntFormat = NumberFormat.getIntegerInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        depthControlButtonGroup = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        includeFileCheckBox = new javax.swing.JCheckBox();
        entireTreeRadioButton = new javax.swing.JRadioButton();
        maxDepthRadioButton = new javax.swing.JRadioButton();
        maxDepthTextField = new JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(includeFileCheckBox, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.includeFileCheckBox.text")); // NOI18N

        depthControlButtonGroup.add(entireTreeRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(entireTreeRadioButton, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.entireTreeRadioButton.text")); // NOI18N
        entireTreeRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                entireTreeRadioButtonActionPerformed(evt);
            }
        });

        depthControlButtonGroup.add(maxDepthRadioButton);
        maxDepthRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(maxDepthRadioButton, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.maxDepthRadioButton.text")); // NOI18N
        maxDepthRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maxDepthRadioButtonActionPerformed(evt);
            }
        });

        maxDepthTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxDepthTextField.setText(org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.maxDepthTextField.text")); // NOI18N
        maxDepthTextField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                maxDepthTextFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.jLabel2.text")); // NOI18N

        directoryTextField.setText(org.openide.util.NbBundle.getMessage(DirectoryOptionDialog.class, "DirectoryOptionDialog.directoryTextField.text")); // NOI18N
        directoryTextField.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                directoryTextFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(includeFileCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(entireTreeRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maxDepthRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxDepthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(190, 190, 190))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(directoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(includeFileCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDepthRadioButton)
                    .addComponent(maxDepthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entireTreeRadioButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(directoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addGap(24, 24, 24))
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        String dir = directoryTextField.getText();
       
        if (dir == null || mDirChangedListener == null)
        {
            return;
        }

        int depth = Integer.MAX_VALUE;
        try
        {
            String val = maxDepthTextField.getText();
            if (val != null)
            {
                val = val.trim();
                int level = mIntFormat.parse(val).intValue();
                depth = level <= 0 ? depth : level;
            }
        }
        catch (Exception ex)
        {
        }

        // Got to do this 
        LOGGER.log(Level.INFO, "###  Reading dir: {0}", dir);
        
        DirectoryChangeEvent ev = new DirectoryChangeEvent(dir,
                includeFileCheckBox.isSelected(),
                entireTreeRadioButton.isSelected(),
                depth);
        mDirChangedListener.directoryChanged(ev);
        
        LOGGER.info("###  Finished notifying data load: ");
        doClose(RET_OK);
        
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void maxDepthRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maxDepthRadioButtonActionPerformed
    {//GEN-HEADEREND:event_maxDepthRadioButtonActionPerformed
        maxDepthTextField.setEnabled(true);
    }//GEN-LAST:event_maxDepthRadioButtonActionPerformed

    private void directoryTextFieldMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_directoryTextFieldMouseClicked
    {//GEN-HEADEREND:event_directoryTextFieldMouseClicked
        if (mLastVisit == null)
        {
            mLastVisit = new File(System.getProperty("user.home"));
            mFileChooser.setCurrentDirectory(mLastVisit);
        }
        
        int returnVal = mFileChooser.showOpenDialog(this);
        String targetDir = null;

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = mFileChooser.getSelectedFile();
            
            if (file == null || !file.exists() || !file.isDirectory())
            {
                return;
            }
            
            targetDir = file.getAbsolutePath();
            boolean changed = !mLastVisit.getAbsolutePath().equals(targetDir);
            
            if (changed)
            {
                directoryTextField.setText(targetDir);
                mLastVisit = file;
            }
        }
        
        okButton.setEnabled(targetDir != null);
    }//GEN-LAST:event_directoryTextFieldMouseClicked

    private void entireTreeRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_entireTreeRadioButtonActionPerformed
    {//GEN-HEADEREND:event_entireTreeRadioButtonActionPerformed
        maxDepthTextField.setEnabled(false);
    }//GEN-LAST:event_entireTreeRadioButtonActionPerformed

    private void maxDepthTextFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_maxDepthTextFieldFocusLost
    {//GEN-HEADEREND:event_maxDepthTextFieldFocusLost
        String val = maxDepthTextField.getText();
        String defValue = DEF_DIR_DEPTH;

        if (val == null || val.isEmpty())
        {
            maxDepthTextField.setText(defValue);
            return;
        }

        try
        {
            int depth = mIntFormat.parse(val).intValue();
            val = depth <= 0 ? defValue : val;
        }
        catch (Exception ex)
        {
            val = defValue;
        }

        maxDepthTextField.setText(val);
    }//GEN-LAST:event_maxDepthTextFieldFocusLost
    
    private void doClose(int retStatus)
    {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    public static void showDialog(final JFrame parent,
            final IDirectoryChangedListener listener)
    {
        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                DirectoryOptionDialog dialog =
                        new DirectoryOptionDialog(parent, true, listener);

                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        if (e != null)
                        {
                            e.getWindow().dispose();
                        }
                    }
                });

                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.ButtonGroup depthControlButtonGroup;
    private javax.swing.JTextField directoryTextField;
    private javax.swing.JRadioButton entireTreeRadioButton;
    private javax.swing.JCheckBox includeFileCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton maxDepthRadioButton;
    private javax.swing.JTextField maxDepthTextField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
