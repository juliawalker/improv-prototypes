/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.pnnl.improv.treemapvis;


import gov.pnnl.improv.prefuse.treemap.TreeMapDemo;
import gov.pnnl.improv.prefuse.treemap.TreeMapRenderer;
import java.awt.BorderLayout;
import java.awt.Dimension;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import prefuse.Display;
import prefuse.data.Tree;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//gov.pnnl.improv.treemapvis//TreeMap//EN",
    autostore = false)
@TopComponent.Description(
    preferredID = "TreeMapTopComponent",
    iconBase = "gov/pnnl/improv/treemapvis/kdisknav_.png16.png",
    persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "gov.pnnl.improv.treemapvis.TreeMapTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_TreeMapAction",
    preferredID = "TreeMapTopComponent")
@Messages(
{
    "CTL_TreeMapAction=TreeMap",
    "CTL_TreeMapTopComponent=Tree Map View",
    "HINT_TreeMapTopComponent=This is a TreeMap window"
})
public final class TreeMapTopComponent extends TopComponent
{
    private static final long serialVersionUID = 5440229864002236930L;

    private TreeMapRenderer mTreeMapRenderer;
    private TreeMapDemo mTreeMapDemo;
   
    public TreeMapTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_TreeMapTopComponent());
        setToolTipText(Bundle.HINT_TreeMapTopComponent());

        postInit();
    }

    @Override
    public void componentOpened()
    {
        mVisPanel.setVisible(true);
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
        mVisPanel.setVisible(false);
    }

    public void updateTreeMap(Tree tr)
    {
        if (tr == null)
        {
            return;
        }
        if (mTreeMapDemo != null)
        {
            mVisPanel.remove(mTreeMapDemo);
        }

        try
        {
            mTreeMapDemo = new TreeMapDemo();
            initTreeMapObject(mTreeMapDemo);
            mTreeMapDemo.showData(tr, "label");
            mVisPanel.add(mTreeMapDemo, BorderLayout.CENTER);
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void updateTreeRenderer(Tree tr)
    {
        if (tr == null)
        {
            return;
        }
        if (mTreeMapRenderer != null)
        {
            mVisPanel.remove(mTreeMapRenderer);
        }
        
        try
        {
            mTreeMapRenderer = new TreeMapRenderer();
            initTreeMapObject(mTreeMapRenderer);
            mTreeMapRenderer.showData(tr);
            mVisPanel.add(mTreeMapRenderer, BorderLayout.CENTER);
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    private void postInit()
    {
    }
    
    private void initTreeMapObject(Display visobj)
    {
        java.awt.Dimension dim = new Dimension(getWidth() - 5, getHeight() - 5);
        visobj.setPreferredSize(dim);
        visobj.setSize(dim);
        visobj.setOpaque(true);
        visobj.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED, 2));
    }
   
    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mVisPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 51), 3));
        setLayout(new java.awt.BorderLayout());

        mVisPanel.setOpaque(false);

        add(mVisPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mVisPanel;
    // End of variables declaration//GEN-END:variables

}
