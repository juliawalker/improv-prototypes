/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.pnnl.improv.datasource.ui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//gov.pnnl.improv.datasource.ui//DataSourceViewer//EN",
    autostore = false)
@TopComponent.Description(
    preferredID = "DataSourceViewerTopComponent",
iconBase = "gov/pnnl/improv/datasource/ui/database.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "gov.pnnl.improv.datasource.ui.DataSourceViewerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_DataSourceViewerAction",
    preferredID = "DataSourceViewerTopComponent")
@Messages(
{
    "CTL_DataSourceViewerAction=DataSourceViewer",
    "CTL_DataSourceViewerTopComponent=DataSourceViewer Window",
    "HINT_DataSourceViewerTopComponent=This is a DataSourceViewer window"
})
public final class DataSourceViewerTopComponent extends TopComponent
    implements ExplorerManager.Provider, PropertyChangeListener
{
    private final ExplorerManager mExplorer = new ExplorerManager();
    private final DataSourceQuery mDataSourceQuery;

    public DataSourceViewerTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_DataSourceViewerTopComponent());
        setToolTipText(Bundle.HINT_DataSourceViewerTopComponent());

        mDataSourceQuery = new DataSourceQuery();
        InstanceContent content = new InstanceContent();
        Lookup viewLookup = new AbstractLookup(content);
        DataSourceEventChildFactory nodeFactory =
                new DataSourceEventChildFactory(mDataSourceQuery, viewLookup);
        
        RootDataSourceNode root = new RootDataSourceNode(mDataSourceQuery, content,
                viewLookup, nodeFactory);
        root.setDisplayName("Database Instance");
        root.addPropertyChangeListener(this);
        mExplorer.setRootContext(root);

        associateLookup (ExplorerUtils.createLookup(mExplorer, getActionMap()));
        setDisplayName ("Data Source Explorer");
    }
    
    @Override
    public ExplorerManager getExplorerManager()
    {
        return mExplorer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        // Updates the tree view when a data source becomes the
        // active one in use
        if ("SetActiveDataSource".equals(evt.getPropertyName())
            && evt.getNewValue() != null)
        {
            mExplorer.setExploredContext(null,
                new Node[] { (Node)evt.getNewValue() });
        }
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

}
